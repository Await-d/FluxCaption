name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ===========================================================================
  # Backend Tests
  # ===========================================================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout

      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+psycopg://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          OLLAMA_BASE_URL: http://localhost:11434
          JELLYFIN_BASE_URL: http://localhost:8096
          JELLYFIN_API_KEY: test_key
        run: |
          pytest tests/unit -v --cov=app --cov-report=xml --cov-report=term

      - name: Run integration tests (non-slow)
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+psycopg://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          TEST_DATABASE_URL: postgresql+psycopg://test_user:test_pass@localhost:5432/test_db
        run: |
          pytest tests/integration -v -m "not slow" --timeout=60

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ===========================================================================
  # Frontend Tests & Build
  # ===========================================================================
  test-frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Type check
        working-directory: ./frontend
        run: pnpm type-check

      - name: Lint
        working-directory: ./frontend
        run: pnpm lint

      - name: Build
        working-directory: ./frontend
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 7

  # ===========================================================================
  # Docker Build
  # ===========================================================================
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: fluxcaption-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: fluxcaption-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================================================
  # Integration Test with Docker Compose
  # ===========================================================================
  test-docker-compose:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          DATABASE_URL=postgresql+psycopg://fluxcaption:fluxcaption@postgres:5432/fluxcaption
          REDIS_URL=redis://redis:6379/0
          OLLAMA_BASE_URL=http://ollama:11434
          JELLYFIN_BASE_URL=http://localhost:8096
          JELLYFIN_API_KEY=test_key
          EOF

      - name: Start services
        run: |
          docker compose up -d postgres redis
          sleep 10

      - name: Check services health
        run: |
          docker compose ps
          docker compose logs postgres
          docker compose logs redis

      - name: Stop services
        run: docker compose down -v

  # ===========================================================================
  # Linting & Code Quality
  # ===========================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ruff
        run: pip install ruff

      - name: Run ruff linter
        working-directory: ./backend
        run: ruff check app/

      - name: Run ruff formatter check
        working-directory: ./backend
        run: ruff format --check app/
