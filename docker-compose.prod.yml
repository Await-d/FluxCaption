# =============================================================================
# FluxCaption Production Docker Compose Override
# =============================================================================
# Usage: docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # PostgreSQL - Production Configuration
  # =============================================================================
  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Use strong password from .env
    # Remove port exposure for security (only internal network access)
    ports: []
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Redis - Production Configuration
  # =============================================================================
  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports: []
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Ollama - Production Configuration
  # =============================================================================
  ollama:
    ports: []
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Backend - Production Configuration
  # =============================================================================
  backend:
    # Remove --reload flag for production
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-}@redis:6379/0
    # Remove hot-reload volume mounts
    volumes:
      - api_logs:/app/logs
      - subtitle_output:/app/output/subtitles
      - whisper_models:/app/models/whisper
      - temp_files:/tmp/fluxcaption
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Worker - Production Configuration
  # =============================================================================
  worker:
    command: celery -A app.workers.celery_app worker -l INFO -Q default,scan,translate,asr -c 2 --max-tasks-per-child 100
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-}@redis:6379/0
    volumes:
      - worker_logs:/app/logs
      - subtitle_output:/app/output/subtitles
      - whisper_models:/app/models/whisper
      - temp_files:/tmp/fluxcaption
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Beat - Production Configuration
  # =============================================================================
  beat:
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-}@redis:6379/0
    volumes:
      - beat_logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Frontend - Production Configuration
  # =============================================================================
  frontend:
    # Production port binding (use HTTPS in real production)
    ports:
      - "80:80"
      # - "443:443"  # Add SSL/TLS configuration if needed
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# =============================================================================
# Production Volume Configuration
# =============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/ollama
  whisper_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/whisper_models
  subtitle_output:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/subtitle_output
